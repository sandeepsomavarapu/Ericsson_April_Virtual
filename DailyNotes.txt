
JAVA:
======

LANGUAGE:
========

		ENGLISH-->COMMUNICATION WITH HUMAN
		
		
PROGRAMMING LANGUAGE:
=====================		


			COMMUNICATION WITH MACHINES


				POP 								OOP
	B,C,BCPL,COBOL,Photon.....					Java,Python,C++,.net,.....

							1)Performance 			inheritance,polymorphisam
							2)security				encapsulation,abstraction


Why Java:
=========

1996 JDK 1.0			1993

2023  20

		Sun micro system  ->oracle corporation --->James gosling


https://www.javatpoint.com/javafx-how-to-install-java


					1)Platform Independent 				.net -->microsoft 
					
					2)Garbage Collection   -->garbage collector


welcome to java 

26-->english

53-->keywords  51 keywords--lower case 




Welcome.java

class Welcome
{

public static void main(String args[])     //JDK-->JRE-->JVM-->binary core /byte code 0's 1's
{

System.out.println("welcome to java");		//source code -->byte code translation -->translator

}									//.java--->.class compailation--->compiler
	

}


WORA

Identifiers:
------------
any name in java will call it as identifier


classname,methodname,inerface,obj,.....

	
	class Welcome123
	
		Welcome@123
		
		123hello


		a-z
		A-Z
		0-9
		$
		_

Eclipse:
========IDE  eclipse,myeclipse,intellji,vscode,netbeans

eclipse


https://www.eclipse.org/downloads/download.php?file=/oomph/epp/2023-03/R/eclipse-inst-jre-win64.exe

Variables:
==========

			sandeeptrainer 787878788778


syntax:

			datatype varname=value;					

				
				datatype varname;//declaration
				
				varname=value;//intialization

			eid,phoneno,aadhar,bankacnt.....numeric data 
			
			salary,marks,weight ....decimal
			
			name,fname,addres......	string

			true,false--->boolean



			PDT 				NPDT
			
		8  PDT				non-premitive DT string,array,class,....
			
			
	byte		1 byte(8 bits)	-128 to 127
	short		2 bytes			-32768 to 32767
	int			4 bytesbytes  -2147483648 to 2147483647
	long		8 bytes			-2 power 64 to 2power 64 -1			numeric data  			 age=32;  contact:7/8/9
			

	float 		4 bytes				
	double		8 bytes								float data= 23.454234234236891f;/
	
	
	char		2 bytes			ASCII				'M','F'			
	boolean		1 bit								true-1,false-0
		

		A-65 -->english
		
		a-97



2 types  of variables:

			local 	:inside the method	
			
			global  outside  the method 


Instance and static:
===================

		global -->instance/non static ,static


syntax:
========
		static keyword 
		with out static keyword 

memory
========
		static variables/properties will get  memory  space only once at the time of class loading into JVM
		instance variables will get memory for every object creation

			class:collection of data members and member functions
			
			object:instance of a class
			A
					classname objname=new classname();//constructor
						
					A obj=new A();//instance properties will get memory

Access
======
		static properties can be accessed by using classname 
		instance properties can  be accessed by using objname
	
Usage
=====
		static orgname,school,clg,countryname....
		instance eid,aadhar,pan,contact......


methods





	public static void main(String[] args) {


	optional									camelcase 
			
	accessmodifier  static/instance returntype methodname(int a,float b)
	{
	
	
	}
	int a=90;
	int b=2;
	
	public static int  addOfTwo(int a ,int b)
	{
			return a+b;
	}
	public  void  subOfTwo(int a ,int b)
	{
			System.out.println(a-b);
	}
	public  int  mulOfTwo()
	{
	return a*b;
	}
	public  void  divOfTwo()
	{
	System.out.println(a/b);
	}

package:
=========
		folder-->package 


predefined 
	6000+ -->
	https://docs.oracle.com/javase/8/docs/api/
	import 

userdefined
	
		package com.ericsson.virtual;
		import...
		
scanner

	String id = "111";
		wrapper classes
		int a = Integer.parseInt(id);
		int b = 23;
		System.out.println("add of two numbers : " + (a + b));


By	default package for every java file java.lang.*
By	default parent class  for every java class java.lang.Object    javap java.lang.Object

25-05-2024:Day-2
===================

Flow Control:
============

			if,else,while,dowhle,switch,for....



OOPS Features:
=============

1)Inheritance
2)Polymorphisam			Performance

3)Abstraction
4)Encapsulation			Security



1)Inheritance:
===============extends,implements

	the process of getting features from one class to another class

		Code Reusability

		class A
		{
		
		//10 methods
		
		
		}

		class B extends A
		{

		//15 methods

		}
		single,multi,hybrid,hirarchie,multiple 

Abstraction:
============

	ATM--->w,d,mini,pinchange.....

	hiding the internal logic and showcasing functionalties


		abstract class
		interface 


abstract methods / concrete method:
================================


		public void m1()//non-abstract or concrete method
		{
		
		}
		public abstract void m2();//abstract  method
		

		class			:collection only concrete methods
		abstract class	:combination of both abstract and concrete methods  0-100%
		interface 		:collection of only abstract methods				100%

					By default interface methods are public abstract 
					By default interface variables are public static final 
					
Multiple Inheritance:
======================

	MI Not supported by java through classes
	MI  supported by java through interfaces


interface Parent				interface Parent1
{								{

	m1();							m1();
	

}								}

class Child implements Parent,Parent1

{

Child child=new Child();
		child.m1();


}
m1()
{

}


polymorphisam,access modifiers,final,this,super,encapsulation,constructor



polymorphisam:
===============

many forms 


	Method Overloading:method name is same and signature different 
	
												no of params
												order of params
												type of params 
	
	
	
public class MethodOverloadingEx {
	public void add(float a, float b) {
		System.out.println("add of two float's :" + (a + b));
	}

	public void add(int a, int b) {
		System.out.println("add of two int's :" + (a + b));
	}

	public void add(int a, int b, int c) {
		System.out.println("add of three int's :" + (a + b + c));
	}

	public void add(int a, float b) {
		System.out.println("add of int ,float  :" + (a + b));
	}

	public void add(float a, int b) {
		System.out.println("add of float,int  :" + (a + b));
	}

	public static void main(String[] args) {
		MethodOverloadingEx obj = new MethodOverloadingEx();

		obj.add(11, 12);
		obj.add(11, 12, 13);
		obj.add(23.4f, 34.2f);
		obj.add(23, 34.5f);
	}

}
Ex2



public class MethodOverloadingEx {
	public void add(float a, float b) {
		System.out.println("add of two float's :" + (a + b));
	}

//	public void add(int a, int b) {
//		System.out.println("add of two int's :" + (a + b));
//	}

	public void add(int a, int b, int c) {
		System.out.println("add of three int's :" + (a + b + c));
	}



	public static void main(String[] args) {
		MethodOverloadingEx obj = new MethodOverloadingEx();

		obj.add(11, 12);
		obj.add(11, 12, 13);
		obj.add(23.4f, 34.2f);
		obj.add(23, 34.5f);
		obj.add('a','b');
	}

}

	
	Method Overriding 
=======================
	A
	100 -->99-1
	
	B extends  A

	overridng :methodname is same implementation is different



AccessModifiers:
================

	public 			any where
	private			only inside the class
	protected		package level+outside package only in the child classes
	default			package level scope



Constructor:
===========
			special member function				boolean=false
			
			1)intialize the object 
			2)intialize default values for instance variables

A
		classname objname=new constructor();
			A a=new A();
			
			
			
			
	public void add(int a, int b) {
		
	}
			
	public A(int a, int b) {
		
	}
			
this super:
===========
		this is used represent current class properties(variable,method,object,constructor)
		
		
		super is used represent parent class properties(variable,method,constructor)
		


encapsulation:
==============

its process of binding the data and corresponding methods together 

			
			class-->variables and methods
			
class Employee
{

		eid  0
		ename 6
		esal  -200
		eadd				private 
		
public methods setters and getters 

}
imuttable				muttable
String,			StringBuffer,StringBuilder /arrays   java.lang


	String :group of  chars 
			
			
			String name="ericsson";//literal 
			String name1=new String("ericsson");
			""
		imuttable 	

	StringBuffer and StringBuilder both are muttable
	
		StringBuffer methods are synchronized
		StringBuilder methods are not synchronized
	

public void m1()
{
												t1,t2,t3

}
public synchronized void m2()
{
											t1,t2,t3					

}


IO Stream:
===========
/*

file I/O   stream    java.io

Character stream(FileWriter,FileReader,BufferedReader,BufferedWriter,PrintWriter)

Byte stream(OutputStream,InputStream,FileOutputStream,FileInputStream)2 bytes

Data Stream(DataInput,DataOutput,DataInputStream,DataOutputStream)

Buffered Stream(Reader,Writer,BufferedInputStream,BufferedOutputStream)1024 bytes

Object Stream(ObjectInputStream,ObjectOutputStream) Serialization/de-serialization
	
	
	
	
	
	
	transient keyword.
	
	
	Serializable-->empty body--->marker interfaces
	Clonnable---->cloning
	RandomAccess -->zero abstract methods

	java.io.Ser
	
	Emp e=new Emp();//Serilizable
	
	//interface --> any no of methods
	
	//marker interface --> no methods 
	
	//functional interface -->only one abstract method
	

exceptions

collections,multi threading  day-4





concurrent collection,threads




java8 features 



case study 











































































































